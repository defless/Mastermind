{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","PIONS","Total_atempts","props","Object","assign","totalAtempts","id","map","item","value","count","Generate_solution","Solution","onClick","u","i","Math","round","random","push","console","log","Generate","setSolution","Generate_proposition","useState","p1","setP1","p2","setP2","p3","setP3","p4","setP4","bNoire","setbNoire","bBlanche","setbBlanche","atempts","setAtempts","PROPOSITION","alreadyIn","Fragment","setPX","PROPOSITION_COPY","solution_copy","solution","length","n","addProposition","propositions","b","prop","alert","setTotalAtempt","check","History","class","style","backgroundColor","Color_picker","handleColor","setHandleColor","e","target","title","App","setTotalAtempts","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b78736a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst PIONS = [\"red\",\"green\",\"blue\",\"orange\",\"pink\",\"purple\"];\n\n\nfunction App() {\n\n  const [solution, setSolution] = useState([]);\n  const [propositions, addProposition] = useState([]);\n  const [totalAtempts, setTotalAtempts] = useState([])\n\n  return (\n    <section>\n        <div id=\"menubtns\">\n          <Generate_solution setSolution={setSolution}/>\n          <button onClick={(e)=>{setSolution([]);addProposition([])}}>Abandonner</button>\n          <Total_atempts totalAtempts={totalAtempts}/>\n        </div>\n        <Generate_proposition totalAtempts={totalAtempts} setTotalAtempt={setTotalAtempts} propositions={propositions} addProposition={addProposition} setSolution={setSolution} solution={solution}/>\n    </section>\n  );\n}\n\nconst Total_atempts = (props) => {\n  var totalAtempts_copy = Object.assign([], props.totalAtempts);\n\n  return(\n    <div id=\"scores\">\n      {props.totalAtempts.map((item)=>(\n        <p>Gagnées en {item.value}:{item.count}</p>\n      ))}\n    </div>\n  )\n}\n\nconst Define_solution = (props) => {\n\n  var PROPOSITION = [];\n  const [s1, setS1] = useState();\n  const [s2, setS2] = useState();\n  const [s3, setS3] = useState();\n  const [s4, setS4] = useState();\n  return(\n  <div>\n    <input className=\"input\" onChange={(e)=>{setS1(e.target.value);}}></input>\n    <input className=\"input\" onChange={(e)=>{setS2(e.target.value);}}></input>\n    <input className=\"input\" onChange={(e)=>{setS3(e.target.value);}}></input>\n    <input className=\"input\" onChange={(e)=>{setS4(e.target.value);}}></input>\n    <button onClick={()=>{\n    PROPOSITION.push(s1,s2,s3,s4);\n    props.setSolution(PROPOSITION);\n    console.log(PROPOSITION);\n  }}>Define Solution\n    </button>\n  </div>\n  );\n}\n\nconst Generate_solution = (props) => {\n\n  var Solution = [];\n\n  function Generate(){\n    var u = 0;\n    Solution = [];\n    for (var i = 0; i < 4; i++) {\n      u=Math.round(Math.random()*5);\n      Solution.push(PIONS[u]);\n      console.log(u);\n    }\n  }\n\n  return(\n    <div id=\"generatebtn\">\n      <button onClick={()=>{Generate();props.setSolution(Solution);console.log(Solution)}}>Generate Random Solution</button>\n    </div>\n  )\n}\n\nconst Generate_proposition = (props)=> {\n\n  const [p1, setP1] = useState();\n  const [p2, setP2] = useState();\n  const [p3, setP3] = useState();\n  const [p4, setP4] = useState();\n  var [bNoire, setbNoire] = useState(0);\n  var [bBlanche, setbBlanche] = useState(0);\n  var [atempts, setAtempts] = useState(0);\n\n  var PROPOSITION = [];\n  var alreadyIn = false;\n\n  function check(){\n\n    var PROPOSITION_COPY = Object.assign([], PROPOSITION);\n    var solution_copy = Object.assign([], props.solution);\n    setAtempts(atempts+=1);\n\n    for (var i = 0; i < PROPOSITION_COPY.length; i++) {\n      if (PROPOSITION_COPY[i]===solution_copy[i]) {\n        setbNoire(bNoire+=1);\n         solution_copy[i]=\"Noir\";\n         PROPOSITION_COPY[i]=\"noir\";\n      }\n    }\n\n    for (var u = 0; u < PROPOSITION_COPY.length; u++) {\n      for (var n = 0; n < solution_copy.length; n++) {\n        if (PROPOSITION_COPY[u]===solution_copy[n]) {\n          setbBlanche(bBlanche+=1);\n          solution_copy[n]=\"Blanc\";\n          PROPOSITION_COPY[u]=\"blanc\";\n        }\n      }\n    }\n    if (bNoire!==4) {\n      props.addProposition([ ...props.propositions, {atempts:atempts, b:bBlanche,n:bNoire,prop:PROPOSITION}]);\n    }\n    if (bNoire===4 && props.solution.length===4){\n      alert('Tu as trouvé !');\n      props.addProposition([]);\n      props.setTotalAtempt([ ...props.totalAtempts, atempts]);\n      for (var i = 0; i < props.totalAtempts.length; i++) {\n        if (props.totalAtempts[i].value===atempts) {\n          props.totalAtempts[i].count+=1;\n          alreadyIn=true;\n        }\n      }\n      if (alreadyIn===false) {\n        props.setTotalAtempt([ ...props.totalAtempts, {value:atempts,count:1}]);\n        alreadyIn=true;\n      }\n      setAtempts(0);\n      props.setSolution();\n    }\n    if (atempts===16) {\n      alert('Tu as perdu !');\n      props.addProposition([]);\n      for (var i = 0; i < props.totalAtempts.length; i++) {\n        if (props.totalAtempts[i].value===atempts) {\n          props.totalAtempts[i].count+=1;\n          alreadyIn=true;\n        }\n      }\n      if (alreadyIn===false) {\n        props.setTotalAtempt([ ...props.totalAtempts, {value:16,count:1}]);\n        alreadyIn=true;\n      }\n      setAtempts(0);\n      props.setSolution();\n    }\n\n  };\n\n  return(\n    <React.Fragment>\n      <div id=\"proposition\">\n        <Color_picker atempts={atempts} setPX={setP1}/>\n        <Color_picker atempts={atempts} setPX={setP2}/>\n        <Color_picker atempts={atempts} setPX={setP3}/>\n        <Color_picker atempts={atempts} setPX={setP4}/>\n\n        <button onClick={()=>{\n          PROPOSITION.push(p1,p2,p3,p4);\n          check();\n          setbNoire(0);\n          setbBlanche(0);\n        }}>Submit proposition</button>\n      </div>\n      <History propositions={props.propositions}/>\n    </React.Fragment>\n  )\n}\n\nconst History = (props)=> {\n  return(\n    <div id=\"history\">\n    {props.propositions.map((item) => (\n      <div class=\"history_item\">\n        {item.prop.map((item)=>(\n          <button style={{backgroundColor:item}} class=\"dropbtn\"></button>\n        ))}\n        <h3>Blanches {item.b}</h3>\n        <h3>Noires {item.n}</h3>\n        <h3>Tentatives {item.atempts}</h3>\n      </div>\n      ))}\n    </div>\n  );\n}\n\nconst Color_picker = (props)=>{\n  const [handleColor, setHandleColor] = useState('white');\n  return(\n    <div class=\"dropdown\">\n      <button style={{backgroundColor:handleColor}} class=\"dropbtn\"></button>\n      <div class=\"dropdown-content\">\n        <span onClick={(e)=>{setHandleColor(e.target.id);props.setPX(e.target.id)}} id=\"red\" title=\"1\">Rouge</span>\n        <span onClick={(e)=>{setHandleColor(e.target.id);props.setPX(e.target.id)}} id=\"green\" title=\"2\">Vert</span>\n        <span onClick={(e)=>{setHandleColor(e.target.id);props.setPX(e.target.id)}} id=\"blue\" title=\"3\">Bleu</span>\n        <span onClick={(e)=>{setHandleColor(e.target.id);props.setPX(e.target.id)}} id=\"orange\" title=\"4\">Orange</span>\n        <span onClick={(e)=>{setHandleColor(e.target.id);props.setPX(e.target.id)}} id=\"pink\" title=\"5\">Rose</span>\n        <span onClick={(e)=>{setHandleColor(e.target.id);props.setPX(e.target.id)}} id=\"purple\" title=\"6\">Violet</span>\n      </div>\n    </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}